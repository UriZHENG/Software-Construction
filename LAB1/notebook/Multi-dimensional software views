可以通过如下的结构记忆

（1）Build-time

Code-level：Moment（AST、源码、方法、类、接口...）/Period（代码变化：增加、修改、删除）

Component-level：Moment（包、文件、库...）/Period（配置项、版本改变）

（2）Run-time

Code-level：Moment（代码快照图）/Period（执行跟踪）

Component-level：Moment（部署图）/Period（事件日志）

（二）Quality properties of software systems

1、内部：

（1）代码行数(LOC)；

（2）复杂度（Complexity）；

（3）结构：高内聚低耦合；

（4）可读性（Readability）；

（5）可理解性（Understandability）；

（6）整洁度（Clearness）；

（7）大小（Size）

2、外部：

（1）正确性（Correctness）：至高无上的质量指标，按照预先定义的“规约”执行。一个可用的软件一定是正确的，所以首要保证软件的正确性，其他的都可以做妥协、让步，但只有这一项不可妥协。
（2）健壮性（Robustness）:是对正确性的补充，即在出现“规约”定义之外的情形的时候，软件要做出恰当的反应，通俗地说就是出现异常时不要“崩溃”。
但软件的“正常”与“异常”是主观而非客观的，所谓的“异常”，取决于spec的范畴，那些未被“规约”覆盖的情况即为“异常情况”。
（3）可扩展性（Extendibility）：进行扩展使得程序能够应对变化。简约设计主义与分离设计主义。
（4）可复用性（Reusability）：一次开发进行多次使用，容易发现程序的共性。
（5）兼容性（Compatibility）：在不同的环境下都是可用的，容易集成设计开发。
（6）效率（Efficiency）：不要过早的优化，性能在没有正确性保障的条件下是没有意义的。过早优化是万恶之源！
（7）可移植性（Portability）：软件可方便的在不同的技术环境之间移植。
（8）易用性（Easy of use）：学习成本低，结构简单、清晰，易于使用。
（9）功能性（Functionality）：功能过多会导致易用性的降低。主要功能要首要提升质量。
